#!/bin/bash

#===============================================================================
# Script: nmon-edc
# Version: 22.09.1
#===============================================================================

#===============================================================================
# Environment
#===============================================================================
readonly NEDC_PREFIX="$(realpath "$(dirname "${BASH_SOURCE[0]}")"/..)"
readonly NEDC_CONFDIR="${NEDC_PREFIX}/etc"
readonly NEDC_LIBEXECDIR="${NEDC_PREFIX}/libexec/nedc"
readonly NEDC_LOGDIR="${NEDC_PREFIX}/var/log"

#===============================================================================
# Function: Event Log
#===============================================================================
readonly LOGGER_LEVEL_TRACE=0 LOGGER_LEVEL_DEBUG=1 LOGGER_LEVEL_INFO=2 LOGGER_LEVEL_WARN=3 LOGGER_LEVEL_ERROR=4
readonly LOGGER_LEVELS=("TRACE" "DEBUG" "INFO" "WARN" "ERROR")
event-log() {
	while (( $# > 0 )); do
		case "${1}" in
			-level)
				local -i level="${2}"
				shift
				;;
			-message)
				local message="${2}"
				shift
				;;
		esac
		shift
	done
	if (( level == LOGGER_LEVEL_ERROR )); then
		printf "[%26s] [%-5s] %s\n" "$(date "+%Y-%m-%d %H:%M:%S %:z")" "${LOGGER_LEVELS[${LOGGER_LEVEL_ERROR}]}" "${message:-Undefined Exception} @ ${FUNCNAME[1]}:${BASH_LINENO[0]}"
		exit 1
	fi
	if (( level >= LOG_LEVEL )); then
		printf "[%26s] [%-5s] %s\n" "$(date "+%Y-%m-%d %H:%M:%S %:z")" "${LOGGER_LEVELS[${level}]}" "${message}"
	fi
	return 0
}

#===============================================================================
# Function: Help
#===============================================================================
help() {
	cat <<- eof >&1

nmon EDC (External Data Collector)

Usage: $(basename "${BASH_SOURCE[0]}") -action {start | stop} [-log-level LEVEL] -name NAME -outdir DIR [-outfile-nedc FILE] [-outfile-nmon FILE]

Options:
  -action ACTION        Start / Stop Data Collection: {start | stop}
  -log-level LEVEL      Log Level: {TRACE | DEBUG | INFO | WARN | ERROR}
  -name NAME            nmon External Data Collector Name
  -outdir DIR           Output Directory
  -outfile-nedc FILE    Output File for nmon EDC Data
  -outfile-nmon FILE    Output File for nmon Base Data

Available External Data Collectors:
  sensors     libsensors Data Collection

eof
	exit 0
}

# nmon EDC Modules
while IFS= read -d '' -r modulefile; do
	module="$(awk 'match($0, /(nedc::.*)\(\)/, a) {print a[1]}' "${modulefile}")"
	module="${module//./::}"
	if [[ -n "${module}" ]] && [[ "$(type -t "${module}" 2>/dev/null)" != "function" ]]; then
		# shellcheck source=/dev/null
		source "${modulefile}" &>/dev/null || \
			{ nedc::utils::logger::event-log -level "${LOGGER_LEVEL_WARN}" -message "Failed to Load Modulefile: [${modulefile}] - Skipping Module"; }
	fi
done < <(find "${NEDC_LIBEXECDIR}/" -name "*.sh" -print0)

# Options
while (( $# > 0 )); do
	case "${1}" in
		"-action")
			action="${2,,}"
			shift
			;;
		"-help"|"-h")
			help
			;;
		"-log-level")
			LOG_LEVEL="${2}"
			shift
			;;
		"-name")
			readonly NEDC_NAME="${2}"
			shift
			;;
		"-outdir")
			outdir="${2}"
			shift
			;;
		"-outfile-nedc")
			outfile_nedc="${2}"
			shift
			;;
		"-outfile-nmon")
			outfile_nmon="${2}"
			shift
			;;
		*)
			nedc::utils::logger::exception-raise -message "Invalid Option: [${1}]"
			;;
	esac
	shift
done

# Log Level
if [[ -n "${JOB_LOG_LEVEL}" ]]; then
	LOG_LEVEL="${JOB_LOG_LEVEL}"
fi
LOG_LEVEL="${LOG_LEVEL:-INFO}"
if [[ "${LOG_LEVEL}" != "ALL" && "${LOG_LEVEL}" != "TRACE" && "${LOG_LEVEL}" != "DEBUG" \
		&& "${LOG_LEVEL}" != "INFO" && "${LOG_LEVEL}" != "WARN" && "${LOG_LEVEL}" != "ERROR" && "${LOG_LEVEL}" != "OFF" ]]; then
	event-log -level "${LOGGER_LEVEL_ERROR}" -message "Invalid Log Level: [${LOG_LEVEL}]"
fi
LOG_LEVEL="LOGGER_LEVEL_${LOG_LEVEL}"
LOG_LEVEL="${!LOG_LEVEL}"

# Startup Message
event-log -level "${LOGGER_LEVEL_TRACE}" -message "Starting nmon External Data Collector"

# Log Level
event-log -level "${LOGGER_LEVEL_DEBUG}" -message "Performing Execution with Log Level: [${LOGGER_LEVELS[${LOG_LEVEL}]}]"

# Sanity Check
if [[ -z "${action}" ]]; then
	event-log -level "${LOGGER_LEVEL_ERROR}" -message "Missing Argument: [Action]"
fi
if [[ "${action}" != "start" ]] && [[ "${action}" != "stop" ]]; then
	event-log -level "${LOGGER_LEVEL_ERROR}" -message "Invalid Action: [${action}]"
fi
if [[ -z "${NEDC_NAME}" ]]; then
	event-log -level "${LOGGER_LEVEL_ERROR}" -message "Missing Argument: [NEDC Name]"
fi
if [[ ! -d "${NEDC_CONFDIR}/${NEDC_NAME}.d" ]]; then
	event-log -level "${LOGGER_LEVEL_ERROR}" -message "Invalid nmon External Data Collector: [${NEDC_NAME}]"
fi
if [[ -z "${outdir}" ]]; then
	event-log -level "${LOGGER_LEVEL_ERROR}" -message "Missing Argument: [Output Directory]"
fi
if [[ ! -d "${outdir}" ]]; then
	event-log -level "${LOGGER_LEVEL_ERROR}" -message "Invalid Output Directory: [${outdir}]"
fi
timestamp="$(date +"%Y%m%dT%H%M%S")"
if [[ -z "${outfile_nedc}" ]]; then
	outfile_nedc="nedc.${HOSTNAME}.${timestamp}.$$.csv"
else
	outfile_nedc="$(basename "${outfile_nedc}")"
fi
if [[ -z "${outfile_nmon}" ]]; then
	outfile_nmon="nmon.${HOSTNAME}.${timestamp}.$$.csv"
else
	outfile_nmon="$(basename "${outfile_nmon}")"
fi

case "${action}" in
	"start")
		export NMON_END="${NEDC_CONFDIR}/${NEDC_NAME}.d/nmon-end.sh"
		export NMON_SNAP="${NEDC_CONFDIR}/${NEDC_NAME}.d/nmon-snap.sh"
		export NMON_START="${NEDC_CONFDIR}/${NEDC_NAME}.d/nmon-start.sh"
		source "${NEDC_CONFDIR}/${NEDC_NAME}.d/${NEDC_NAME}.sh" || \
			{ event-log -level "${LOGGER_LEVEL_ERROR}" -message "Failed to Load NEDC Execution Environment from File: [${NEDC_LIBEXECDIR}/${NEDC_NAME}/${NEDC_NAME}.sh]"; }
		export NEDC_OUTFILE="${outdir}/${outfile_nedc}"
		touch "${outdir}/${outfile_nmon}" || \
			{ event-log -level "${LOGGER_LEVEL_ERROR}" -message "Failed to Initialize nmon Output File: [${outdir}/${outfile_nmon}]"; }
		touch "${outdir}/${outfile_nedc}" || \
			{ event-log -level "${LOGGER_LEVEL_ERROR}" -message "Failed to initialize NEDC Output File: [${outdir}/${outfile_nedc}]"; }
		nedc::apis::nmon::collection-start -directory "${outdir}" -filename "${outfile_nmon}" || \
			{ event-log -level "${LOGGER_LEVEL_ERROR}" -message "Failed to Start nmon Data Collection"; }
		event-log -level "${LOGGER_LEVEL_INFO}" -message "Started nmon Data Collection"
		;;
	"stop")
		nedc::apis::nmon::collection-stop || \
			{ event-log -level "${LOGGER_LEVEL_ERROR}" -message "Failed to Stop nmon Data Collection"; }
		event-log -level "${LOGGER_LEVEL_INFO}" -message "Stopped nmon Data Collection"
		;;
esac

# Exit Message
event-log -level "${LOGGER_LEVEL_TRACE}" -message "Stopping nmon External Data Collector"

exit 0
